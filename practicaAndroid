build.gradle (:app)
/**
 *
 *	MIT License
 *
 *	Copyright (c) 2023 Gautam Hazarika
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy
 *	of this software and associated documentation files (the "Software"), to deal
 *	in the Software without restriction, including without limitation the rights
 *	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *	copies of the Software, and to permit persons to whom the Software is
 *	furnished to do so, subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *	SOFTWARE.
 *
 **/

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

android {
    namespace 'com.example.foodike'
    compileSdk 34

    defaultConfig {
        applicationId "com.example.foodike"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0.0-alpha"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    kapt {
        correctErrorTypes true
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.13'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}
dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'

    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.activity:activity-compose:1.3.1'
    implementation "androidx.compose.ui:ui:$compose_ui_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_ui_version"
    implementation 'androidx.compose.material:material:1.2.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_ui_version"

    implementation "androidx.compose.material:material-icons-extended:$compose_ui_version"

    // Dagger - Hilt
    implementation 'com.google.dagger:hilt-android:2.50'
    kapt 'com.google.dagger:hilt-android-compiler:2.50'
    kapt 'androidx.hilt:hilt-compiler:1.1.0'
    implementation 'androidx.hilt:hilt-navigation-compose:1.1.0'

    // Splash API
    implementation 'androidx.core:core-splashscreen:1.0.0'

    // Navigation Compose
    implementation("androidx.navigation:navigation-compose:2.5.3")

    // Pager and Indicators - Accompanist
    implementation "com.google.accompanist:accompanist-pager:$accompanist_version"
    implementation "com.google.accompanist:accompanist-pager-indicators:$accompanist_version"

    // DataStore Preferences
    implementation("androidx.datastore:datastore-preferences:1.0.0")

    implementation "com.google.accompanist:accompanist-flowlayout:0.28.0"
}

--------------------------------------------------------
--------------------------------------------------------
--------------------------------------------------------
buil.gradle(Project)

/**
 *
 *	MIT License
 *
 *	Copyright (c) 2023 Gautam Hazarika
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy
 *	of this software and associated documentation files (the "Software"), to deal
 *	in the Software without restriction, including without limitation the rights
 *	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *	copies of the Software, and to permit persons to whom the Software is
 *	furnished to do so, subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *	SOFTWARE.
 *
 **/

buildscript {
    ext {
        compose_ui_version = '1.2.0'
        accompanist_version = '0.24.2-alpha'

    }

}// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    id 'com.android.application' version '8.5.0' apply false
    id 'com.android.library' version '8.5.0' apply false
    id 'org.jetbrains.kotlin.android' version '1.9.23' apply false
    id 'com.google.dagger.hilt.android' version '2.50' apply false

}
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------


SETTINGS GRADLE
  GRADLE_LOCAL_JAVA_HOME
  jdk-17

gradle.properties
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8

--------------------------------------


package com.example.foodike.domain.model

data class Producto(val id: Int, val name: String, val precio: Double)



------------------------------------------------------------------------------------
interface ProductRepository {
    suspend fun getAllProducts(): Results<List<Producto>>
    suspend fun getProductById(id: Int): Results<Producto?>
    suspend fun addProduct(product: Producto): Results<Unit>
    suspend fun updateProduct(product: Producto): Results<Unit>
    suspend fun deleteProduct(id: Int): Results<Unit>
}

----------------------------------------------------------------------------------------

package com.example.foodike.data.repository
import com.example.foodike.domain.model.Producto
import com.example.foodike.domain.repository.ProductRepository

class ProductRepositoryImpl(): ProductRepository {

    private val productList = mutableListOf(
        Producto(1, "Hamburguesa", 5.99),
        Producto(2, "Pizza", 8.99),
        Producto(3, "Sushi", 12.50)
    )

    override suspend fun getAllProducts(): Results<List<Producto>> {
        return Results.Success(productList)

    }

    override suspend fun getProductById(id: Int): Results<Producto?> {
        val product = productList.find { it.id == id }
        return if (product != null) {
            Results.Success(product)
        } else {
            Results.Error("Producto no encontrado")
        }
    }

    override suspend fun addProduct(product: Producto): Results<Unit> {
        return try {
            productList.add(product)
            Results.Success(Unit)
        } catch (e: Exception) {
            Results.Error("Error al agregar el producto")
        }
    }

    override suspend fun updateProduct(product: Producto): Results<Unit> {
        val index = productList.indexOfFirst { it.id == product.id }
        return if (index != -1) {
            productList[index] = product
            Results.Success(Unit)
        } else {
            Results.Error("Producto no encontrado")
        }
    }

    override suspend fun deleteProduct(id: Int): Results<Unit> {
        
        val removed = productList.removeIf { it.id == id }
        return if (removed) {
            Results.Success(Unit)
        } else {
            Results.Error("Producto no encontrado")
        }
    }

}

‚Äì---------------------------------------
using Microsoft.AspNetCore.Mvc;
using System.Text.Json;

[ApiController]
[Route("api/webhook/whatsapp")] // Esta es la ruta del endpoint
public class WebhookController : ControllerBase
{
    // üëâ Este es tu endpoint POST para recibir mensajes de WhatsApp
    [HttpPost]
    public async Task<IActionResult> Receive([FromBody] JsonElement payload)
    {
        try
        {
            var entry = payload.GetProperty("entry")[0];
            var change = entry.GetProperty("changes")[0];
            var value = change.GetProperty("value");

            var contacts = value.GetProperty("contacts")[0];
            var waId = contacts.GetProperty("wa_id").GetString();
            var name = contacts.GetProperty("profile").GetProperty("name").GetString();

            var messages = value.GetProperty("messages")[0];
            var messageText = messages.GetProperty("text").GetProperty("body").GetString();

            Console.WriteLine($"üì© Mensaje de {name} ({waId}): {messageText}");

            return Ok();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error al procesar webhook: {ex.Message}");
            return BadRequest();
        }
    }

    // üëâ Este es tu endpoint GET para la verificaci√≥n de Meta
    [HttpGet]
    public IActionResult Verify([FromQuery(Name = "hub.mode")] string mode,
                                [FromQuery(Name = "hub.challenge")] string challenge,
                                [FromQuery(Name = "hub.verify_token")] string verifyToken)
    {
        const string myVerifyToken = "TOKEN_VERIFICACION"; // tu token personalizado

        if (mode == "subscribe" && verifyToken == myVerifyToken)
        {
            return Ok(challenge);
        }

        return Forbid();
    }
}


var builder = WebApplication.CreateBuilder(args);
builder.Services.AddControllers();
var app = builder.Build();

app.UseHttpsRedirection();

app.MapControllers(); // üî• Esto activa todos los endpoints de los controladores

app.Run();
